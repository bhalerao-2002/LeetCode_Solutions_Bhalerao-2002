class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<pair<int, int>> ess;
        for (int i = 0; i < n; i++){
            ess.push_back({efficiency[i], speed[i]});
        }
        sort(ess.rbegin(), ess.rend());

        long sumS = 0, res = 0;
        priority_queue <int, vector<int>, greater<int> > pq;
        for (int i = 0; i < n; i++) {
            pq.push(ess[i].second);
            sumS += ess[i].second;
            if (pq.size() > k) {
                sumS -= pq.top();
                pq.pop();
            }
            res = max(res, sumS * ess[i].first);
        }
        return res % (int)(1e9+7);
    }
};
